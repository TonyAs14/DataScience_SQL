-- AB Testing
-- We are running an experiment at an item-level, which means all users who visit will see the same page, but the layout of different item pages may differ. 
-- Please follow the steps below and good luck!


-- QUESTION 1
-- Compare the final_assignments_qa table to the assignment events we captured for user_level_testing. 
-- Write an answer to the following question: Does this table have everything you need to compute metrics like 30-day view-binary?

-- Not really, as we know, the created_at date is necessary to get that information.

SELECT 
  * 
FROM 
  dsv1069.final_assignments_qa
  
  
  
-- QUESTION 2
-- Write a query and table creation statement to make final_assignments_qa look like the final_assignments table. If you discovered something missing 
-- in part 1, you may fill in the value with a place holder of the appropriate data type.

SELECT 
  item_id,
  test_a       AS test_assignment, 
  'test_a'     AS test_number, 
  '2020-01-01' AS test_start_date
FROM 
  dsv1069.final_assignments_qa



-- QUESTION 3
-- Use the final_assignments table to calculate the order binary for the 30 day window after the test assignment for item_test_2 (You may include the day the test started)

SELECT
  test_assignment,
  COUNT(item_id) as items,
  SUM(order_binary_30d) AS items_ordered_30d
FROM
(
  SELECT 
   f.test_assignment,
   f.item_id, 
   MAX(CASE WHEN orders.created_at > f.test_start_date THEN 1 ELSE 0 END)  AS order_binary_30d
  FROM 
    dsv1069.final_assignments f
    
  LEFT OUTER JOIN
    dsv1069.orders
  ON 
    f.item_id = orders.item_id 
  AND 
    orders.created_at >= f.test_start_date
  AND 
    DATE_PART('day', orders.created_at - f.test_start_date ) <= 30
  WHERE 
    f.test_number= 'item_test_2'
  GROUP BY
    f.test_assignment,
    f.item_id
) item_orders
GROUP BY test_assignment



-- QUESTION 4
-- Use the final_assignments table to calculate the view binary, and average views for the 30 day window after the test assignment for item_test_2. (You may include the day the test started)

SELECT item_test_2.item_id,
       item_test_2.test_assignment,
       item_test_2.test_number,
       MAX(CASE
               WHEN (view_date > test_start_date
                     AND DATE_PART('day', view_date - test_start_date) <= 30) THEN 1
               ELSE 0
           END) AS view_binary
FROM
  (SELECT final_assignments.*,
          DATE(events.event_time) AS view_date
   FROM dsv1069.final_assignments AS final_assignments
   LEFT JOIN
       (SELECT event_time,
               CASE
                   WHEN parameter_name = 'item_id' THEN CAST(parameter_value AS NUMERIC)
                   ELSE NULL
               END AS item_id
      FROM dsv1069.events
      WHERE event_name = 'view_item') AS events
     ON final_assignments.item_id = events.item_id
   WHERE test_number = 'item_test_2') AS item_test_2
GROUP BY item_test_2.item_id,
         item_test_2.test_assignment,
         item_test_2.test_number
LIMIT 100;



-- QUESTION 5
-- Use the https://thumbtack.github.io/abba/demo/abba.html to compute the lifts in metrics and the p-values for the binary metrics (30 day order binary and 30 day view binary) using a
-- interval 95% confidence.
 
SELECT test_assignment,
       test_number,
       COUNT(DISTINCT item) AS number_of_items,
       SUM(view_binary_30d) AS view_binary_30d
FROM
  (SELECT final_assignments.item_id AS item,
          test_assignment,
          test_number,
          test_start_date,
          MAX((CASE
                   WHEN date(event_time) - date(test_start_date) BETWEEN 0 AND 30 THEN 1
                   ELSE 0
               END)) AS view_binary_30d
   FROM dsv1069.final_assignments
   LEFT JOIN dsv1069.view_item_events
     ON final_assignments.item_id = view_item_events.item_id
   WHERE test_number = 'item_test_2'
   GROUP BY final_assignments.item_id,
            test_assignment,
            test_number,
            test_start_date) AS view_binary
GROUP BY test_assignment,
         test_number,
         test_start_date;
       
       
         
